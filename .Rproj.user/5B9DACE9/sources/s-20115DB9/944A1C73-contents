---
title: "Introduction to R (offsite)"
author: " "
date: "12 November 2018"
output: html_document
---

# Goals of this workshop

Welcome to the introduction to R training. 

During this workshop we will employ JIT (Just In Time) learning principles. You will be provided with just enough information to do something. By the end of the workshop there will be a lot of unanswered questions, but you should have the tools to find out how to answer them. 


Our goals are as follows:
+ Quick tour of the development environment (RStudio)
+ What are packages and how to install them 
+ 
+ Basic Modelling


# Development environment

Take a look at the RStudio cheatsheet 


+ Editor window
+ Environment window
+ 


# RMarkdown


re is a Rmarkdown  document, it combines R code, markdown and Shiny environment.

To begin with, we will load the tidyverse, haven and the shiny libraries and import the adsl data


```{r setup, warning=FALSE, message = F}
library(tidyverse)
library(shiny)
 

adsl <- read_sas("\\\\actelion.com\\POOL\\GLOBAL\\BIOSTATISTICS\\Clinical Projects\\ACT-064992_Macitentan\\ACT-064992_in_PAH_adult\\Regulatory Authorities\\FDC Maci and Tada\\US (FDA)\\OPUS_FDC\\ADaM_Data\\adsl.sas7bdat")

```

## DPLYR Package 

We Will start exploring dplyr package and the pipe operator %>%. 

Dplyr package has been built to simplify and make R more easy to use. It's based with 5 differents verbs which allow us to manipulate the data:

* select(), which returns a subset of the columns,
* filter(), that is able to return a subset of the rows,
* arrange(), that reorders the rows according to single or multiple variables,
* mutate(), used to add columns from existing data,
* summarize(), which reduces each group to a single row by calculating aggregate measures.


1. select() Function
  + Print out the adsl dataset which contains only: SUBJID, AGE, SEX, SMWDBL, WHOFCBL, HEIGHTBL, WEIGHTBL, TRTSDT and TRTEDT 
  + Create a new data frame called adsl1 according to the first question 

```{r}
#print(select(adsl, SUBJID, AGE, SEX, SMWDBL, WHOFCBL, HEIGHTBL, WEIGHTBL, TRTSDT, TRTEDT))

adsl1 <- select(adsl, SUBJID, AGE, SEX, SMWDBL, WHOFCBL, HEIGHTBL, WEIGHTBL, TRTSDT, TRTEDT)
adsl1
```

mutate

2. mutate() Function
  + Create a new data frame called adsl2, which is adsl1 and an additionnal column DaysBet, the number of days between TRTEDT and TRTSDT
  + Create a new data frame called adsl3, which is adsl2 and an additionnal column BMIBL, BMI of each subject at baseline
  + Create adsl4, which is adsl3 but using only one mutate function from adsl1

```{r}
#adsl2 <- mutate(adsl1, DaysBet = TRTEDT - TRTSDT)

#adsl3 <- mutate(adsl2, BMIBL = WEIGHTBL / (HEIGHTBL * HEIGHTBL * 10e-5))

#adsl4 <- mutate(adsl1, DaysBet = TRTEDT - TRTSDT, BMIBL = WEIGHTBL / (HEIGHTBL * HEIGHTBL * 10e-5))
```


3. filter() Function
  + Create adsl5 from adsl4, if BMIBL >= 25 and AGE <= 50
  + Create adsl6 from adsl4, if WHOFCBL ne "CLASS III" and SEX == "M"
  + Create adsl7 from adsl4, if AGE > 30 and SEX == "M" or AGE < 50 and SEX == "F"
  
```{r}
#adsl5 <- filter(adsl4, BMIBL >= 25 & AGE <= 50)

#adsl6 <- filter(adsl4, WHOFCBL != "CLASS III" & SEX == "M")

#adsl7 <- filter(adsl4, AGE > 30 & SEX == "M" | AGE < 50 & SEX == "F")
```

4. arrange() Function
  + Create adsl8 from adsl4, in AGE ordering
  + Create adsl9 from adsl4, in SEX ordering and AGE descending
  
```{r}
#adsl8 <- arrange(adsl4, AGE)

#adsl9 <- arrange(adsl4, SEX, desc(AGE))
``` 
  
5. summarize() Function
  + Create adsl10 from adsl4, which return the minimum of AGE, called "min"
  + Create adsl11 from adsl4, which return the minimum, maximum, mean and standard deviation of AGE called "min", "max", "mean", "sd"
  
```{r}
#adsl10 <- summarize(adsl4, min = min(AGE, na.rm = T))
#adsl11 <- summarize(adsl4, min=min(AGE, na.rm = T) , average= mean(AGE, na.rm = T), max= max(AGE, na.rm = T), sd= sd(AGE, na.rm = T))

```

6. Pipe operator
  + Create adsl12 from adsl
    * Select: SUBJID, AGE, SEX, SMWDBL, WHOFCBL, HEIGHTBL, WEIGHTBL, TRTSDT and TRTEDT
    * Mutate: BMIBL, BMI of each subject at baseline
    * Filter: WHOFCBL not equal to ""
    * Arrange: SEX and descending AGE

```{r}
#adsl12 <- adsl %>% 
  #select(SUBJID, AGE, SEX, SMWDBL, WHOFCBL, HEIGHTBL, WEIGHTBL, TRTSDT, TRTEDT) %>% 
  #mutate(BMIBL = WEIGHTBL / (HEIGHTBL * HEIGHTBL * 10e-5)) %>% 
  #filter(WHOFCBL != "") %>% 
  #arrange(SEX, desc(AGE))
```

7. Group_by: 
  + Create adsl13, from adsl12 where we summarize SMWDBL by WHOFCBL 
  
```{r}
#adsl13 <- adsl12 %>% 
  #group_by(WHOFCBL) %>% 
  #summarize(min= min(SMWDBL, na.rm = T), average= mean(SMWDBL, na.rm = T), max= max(SMWDBL, na.rm = T), sd= sd(SMWDBL, na.rm = T))
```

## GGPLOT Package 

Now, we can work with GGplot, with 3 differents composantes:
  + Set of data
  + Geom layer 
  + Coordinate set up 

      ggplot(data=..., aes(x = ..., y = ..., col = ..., group = ..., size = ...)) +
          geom_...()
  
To know more about ggplot, we can have a look the many possibilities from the CheatSheet. 

1. Part 1 - Introduction 
  + Create adsl_ggplot, where BMIBL, SMWDBL, SEX, WHOFCBL don't have missing value
  + Use geom_point() to adsl_ggplot with SMWDBL as y and BMIBL as x
  + Use geom_point() to adsl_ggplot with SMWDBL as y and BMIBL as x and SEX as color 
  + Add geom_smooth to the previous code 
  + Add facet_grid (.~ WHOFCBL) to the previous code 
  
```{r, warning = F}

adsl_ggplot <- adsl4 %>% 
  filter(!is.na(SMWDBL) & !is.na(BMIBL) & !is.na(SEX) & WHOFCBL != "")


#ggplot(data = adsl_ggplot, aes(x = BMIBL, y = SMWDBL)) + 
#  geom_point()

#ggplot(data = adsl_ggplot, aes(x = BMIBL, y = SMWDBL, col = SEX)) + 
#  geom_point()

#ggplot(data = adsl_ggplot, aes(x = BMIBL, y = SMWDBL, col = SEX)) + 
#  geom_point() +
#  geom_smooth()

#ggplot(data = adsl_ggplot, aes(x = BMIBL, y = SMWDBL, col = SEX)) + 
#  geom_point() +
#  geom_smooth() + 
#  facet_grid(WHOFCBL ~.)
```

2. Part 2 - Aesthetics
  + We will keep adsl_ggplot as a dataset
  + Use geom_point() where alpha = 0.5 to adsl_ggplot with SMWDBL as y and BMIBL as x, AGE as color
  + Add facet_grid (.~ WHOFCBL) 
  + Add SEX as shape in the ggplot aesthetic
  + Add SEX as fill aesthetic and geom_smooth where method = "lm"
  + All SUBJID as label in in the ggplot aesthetic and add geom_text whith size = 3

```{r}

#ggplot(data = adsl_ggplot, aes(x = BMIBL, y = SMWDBL, col = AGE)) + 
#  geom_point()

#ggplot(data = adsl_ggplot, aes(x = BMIBL, y = SMWDBL, col = AGE)) + 
#  geom_point() + 
#  facet_grid(WHOFCBL ~.)

#ggplot(data = adsl_ggplot, aes(x = BMIBL, y = SMWDBL, col = AGE, shape = SEX)) + 
#  geom_point() + 
#  facet_grid(WHOFCBL ~.)

#ggplot(data = adsl_ggplot, aes(x = BMIBL, y = SMWDBL, fill = SEX, col = AGE, shape = SEX, label= SUBJID)) + 
#  geom_point(alpha = 0.5) + 
#  facet_grid(WHOFCBL ~.) + 
#  geom_smooth(method = "lm") + 
#  geom_text(size = 3)
```

3. Part 3 - Geom 
  + We will keep adsl_ggplot as a dataset
  + Now, use WHOFCBL as x and y = SMWDBL and geom_point
  + replace geom_point() by geom_jitter and then set width to 0.2 and alpha to 0.3 and shape to 1
  + Now drop the y aes and replace WHOFCBL by SMWDBL from ggplot and replace completely by geom_histogram
  + Create y = ..density.. to the aes from geom_histogram and set fill to WHOFCBL, outside aes set alpha to 0.6 
  + Define a ne ggplot, map with WHOFCBL as x and fill as SEX and add geom_bar()
  + Inside geom_bar() add position = "stack" then change to "fill" and then to "dodge"
  +
  
```{r}
#ggplot(data = adsl_ggplot, aes(x = WHOFCBL, y = SMWDBL)) + 
#  geom_point()

#ggplot(data = adsl_ggplot, aes(x = WHOFCBL, y = SMWDBL)) + 
#  geom_jitter(width = 0.2, alpha = 0.3, shape = 1) 

#ggplot(data = adsl_ggplot, aes(x = SMWDBL)) + 
#  geom_histogram() 

#ggplot(data = adsl_ggplot, aes(x = SMWDBL)) + 
#  geom_histogram(aes(y = ..density.., fill = WHOFCBL), alpha = 0.6)

#ggplot(data = adsl_ggplot, aes(x = WHOFCBL, fill = SEX)) + 
#  geom_bar()

#ggplot(data = adsl_ggplot, aes(x = WHOFCBL, fill = SEX)) + 
#  geom_bar(position = "dodge")

#ggplot(data = adsl_ggplot, aes(x = WHOFCBL, fill = SEX)) + 
#  geom_bar(position = "dodge")
```
  
