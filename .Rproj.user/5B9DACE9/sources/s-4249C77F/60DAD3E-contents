---
title: "Introduction to R (offsite)"
author: "Karma"
date: "12 November 2018"
output: html_document
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


# Goals of this workshop
- 
- JIT learning (Just enough information to do something). There will be a lot of unanswered questions, but you should have the tools to find out how to answer them.
- Quick tour of the development environment
- What are packages and how to install them
- Clinical exploration


Tip: Always experiment

# RStudio

The integrated development environment (IDE) we will use is called RStudio.
We 



Start by creating a new R project. 
[File][New Project][New Directory]



getwd()


Create R markdown file 
- Embeds executable code into the report
- Great way to share analysis
- knit


Packages
- Imagine if could download a bunch of macros bundled together
- People all over the world could write macros and share with everyone else
- Peer review would ensure the macros work as advertised
- Packages hosted on CRAN and must pass tests to be accepted

Let's install our first package to read SAS datasets. 

install.packages specifies the name of the package we want to install. 
Library function loads the package into memory - Check the packages tab of RStudio to see packages that are loaded out of the installed.

```{r}
#install.packages("sas7bdat")
library(sas7bdat)
```

Read in SAS dataset

We will read the ADSL dataset from the OPUS registry.

Gotcha 1: Our first gotcha: Backslashes in R have to be escaped, this means we have to add extra backslash for every backslash to out path.

```{r}
#\\actelion.com\POOL\GLOBAL\BIOSTATISTICS\Clinical Projects\ACT-064992_Macitentan\ACT-064992_in_PAH_adult\Regulatory Authorities\FDC Maci and Tada\US (FDA)\OPUS_FDC\ADaM_Data


adsl <- read.sas7bdat("\\\\actelion.com\\POOL\\GLOBAL\\BIOSTATISTICS\\Clinical Projects\\ACT-064992_Macitentan\\ACT-064992_in_PAH_adult\\Regulatory Authorities\\FDC Maci and Tada\\US (FDA)\\OPUS_FDC\\ADaM_Data\\adsl.sas7bdat")
```


Comments in R are preceded by #

The "<-" is an assignment. Assignments can also be done with "=", however convention dictates we use the former.


The dataframe object

- dataframes are the SAS equivelent of a dataset.
- Take a look at the adsl dataframe in the environment window

Inspecting the dataframe
- Number of rows : "nrow"
- Number of columns : "ncol"

```{r}
ncol(adsl)
```

```{r}
nrow(adsl)
```

### Introducing the pipe operator

">" is the pipe operator. Similar to "|" in unix. Basically it means you don't have to pass the name of the previous dataset between operations.


Equivalent to using "data" and "_last_" in SAS:

```{r, engine="sas", engine.path="C:/Program Files/SASHome/SASFoundation/9.4/sas.exe"}
data;   
  set sashelp.class;
  run;
data;
  set _last_;
  where age > 15;
  run;
proc print;
  var name age;
  run; 
```



```{r}
library(dplyr)
 
adsl1 <- 
  adsl %>%
  filter(COHORT != "" & ITTFL == "Y")

#implicit first argument passed via pipe operator
adsl1 <- filter(adsl, COHORT != "" & ITTFL == "Y")
```

Gotcha 2: R is case sensitive, variables are case sensitive.

Filter function:
- same as a where clause


Equality operators in R:
  - In SAS '=' is used for both equality and assignment
  eg. x = 4 = 4;

    
```{r, engine="sas", engine.path="C:/Program Files/SASHome/SASFoundation/9.4/sas.exe"}
  data _null_ ;
    x = 4 = 4 ;
    put x;
    run;
```

  is valid SAS syntax, the first '=' is assignment, the second is to assess equality.
  - In R, assignment can be '=' or '<=' and equality is done by:
    - "==" (is equivelant)
    - "!=" (not equivelant)
    - "<",">" , "<>" (less than, more than, not equal for numerics) 
   
   
And/Or operators:
- & = "and"
- | = "or"


Question 1:
  How many rows were deleted from ADSL using the filter criteria above?
Hint: use nrow and ncol functions
Remember, insert a code chunk from [code] above, or use the shortcut Ctrl+Alt+i


```{r}
nrow(adsl)-nrow(adsl1)
```
  
Our dataset is large so let's keep only a few variables:
This is done using the dplyr select function.


```{r}
adsl2 <- adsl1 %>% select(c("SUBJID","SITEID","AGE","SEX","COHORT"))

#Print column names
colnames(adsl2)
#adsl2 %>% colnames()
```

Dplyr section








Our first plot, 
boxplot of age
We access variables via the $ symbol, use tabs in RStudio to select the variable

```{r}
boxplot(adsl2$AGE)
```

Grouped boxplot
We will introduce the ggplot2 package
Use the ggplot2 cheatsheet (https://www.rstudio.com/resources/cheatsheets/)

ggplot is based on the grammer of graphics. A graph can be thought of being composed of layers
- ggplot object (contains data, x and y coord values)
- aes (how to use the data)

```{r}
library(ggplot2)

g <- ggplot(adsl2, aes(COHORT,AGE)) 
```


Boxplot
```{r}
g + geom_boxplot()
```
```{r}
g + geom_bar(stat = "identity")+theme_bw()
```
What other plots can you do?

Use the ggplot cheatsheet to do 1 of each:
- discrete x, discrete y
- continous x , continuous y

```{r}
adsl3 <-
  adsl2 %>%
  group_by(COHORT) %>%
  mutate(avg_age = mean(AGE),
         min_age = min(AGE),
         max_age = max(AGE)) 
```


```{r}
library(knitr)
adsl3 %>% 
  head() %>% 
  kable()
```



