install.packages("pollstR")
install.packages("Lahman")
install.packages("lpSolve")
##Your code here
library(pollstR)
race2016 <- pollstr_polls(topic = "2016-president-gop-primary",
max_pages = Inf)
##Your code here
library(dplyr)
results <- race2016$questions
##Your code here
library(pollstR)
race2016 <- pollster_polls(topic = "2016-president-gop-primary",
max_pages = Inf)
##Your code here
library(dplyr)
results <- race2016$questions
results <- filter(results, topic=="2016-president-gop-primary" & state != "US")
install.packages("RCurl")
## put your code here
library(readr)
library(dplyr)
library(tidyr)
library(RCurl)
filename <- "https://github.com/datasciencelabs/data/blob/master/movielens-test.csv.gz"
ratings <- read_csv(gzfile(getURL(filename)))
## put your code here
library(readr)
library(dplyr)
library(tidyr)
filename <- "./movielens-test.csv.gz"
ratings <- read_csv(gzfile((filename)))
ratings %>% summarize(
n_users=n_distinct(userId),
n_movies=n_distinct(movieId),
min_rating=min(rating),
max_rating=max(rating))
## put your code here
ratings %>% group_by(userId) %>%
summarize(n_movies=n()) %>%
summarize(median = median(n_movies), max = max(n_movies))
## put your code here
set.seed(755)
n_test <- round(nrow(ratings) / 10)
test_indices <- sample(1:nrow(ratings), n_test, replace=FALSE)
test <- ratings[test_indices,]
train <- ratings[-test_indices,]
rm(ratings) #to save space
## put your code here
RMSE <- function(true_ratings, predicted_ratings){
sqrt(mean((true_ratings - predicted_ratings)^2))
}
RMSE(true_ratings=c(4,3,3,4), predicted_ratings=c(4.5,3.5,1,4))
## put your code here
average_rating <- mean(train$rating)
predictions <- rep(average_rating, nrow(test))
naive_rmse <- RMSE(test$rating, predictions)
View(test)
filename <- "./movielens-test.csv.gz"
ratings <- read_csv(gzfile((filename)))
View(ratings)
## put your code here
library(readr)
library(dplyr)
library(tidyr)
filename <- "./movielens-test.csv.gz"
ratings <- read_csv(gzfile((filename)),stringsAsFactors=FALSE)
## put your code here
library(readr)
library(dplyr)
library(tidyr)
filename <- "./movielens-test.csv.gz"
ratings <- read_csv(gzfile(filename),stringsAsFactors=FALSE)
## put your code here
library(readr)
library(dplyr)
library(tidyr)
filename <- "./movielens-test.csv.gz"
ratings <- read.csv(gzfile(filename),stringsAsFactors=FALSE)
ratings %>% summarize(
n_users=n_distinct(userId),
n_movies=n_distinct(movieId),
min_rating=min(rating),
max_rating=max(rating))
View(ratings)
## put your code here
ratings %>% group_by(userId) %>%
summarize(n_movies=n()) %>%
summarize(median = median(n_movies), max = max(n_movies))
## put your code here
set.seed(755)
n_test <- round(nrow(ratings) / 10)
test_indices <- sample(1:nrow(ratings), n_test, replace=FALSE)
test <- ratings[test_indices,]
train <- ratings[-test_indices,]
rm(ratings) #to save space
## put your code here
RMSE <- function(true_ratings, predicted_ratings){
sqrt(mean((true_ratings - predicted_ratings)^2))
}
RMSE(true_ratings=c(4,3,3,4), predicted_ratings=c(4.5,3.5,1,4))
## put your code here
average_rating <- mean(train$rating)
predictions <- rep(average_rating, nrow(test))
naive_rmse <- RMSE(test$rating, predictions)
print(naive_rmse)
## put your code here
library(readr)
library(dplyr)
library(tidyr)
filename <- "./movielens-test.csv.gz"
ratings <- read.csv(gzfile(filename),stringsAsFactors=FALSE)
ratings %>% summarize(
n_users=n_distinct(userId),
n_movies=n_distinct(movieId),
min_rating=min(rating),
max_rating=max(rating))
str(ratings)
## put your code here
average_rating <- mean(train$rating)
predictions <- rep(average_rating, nrow(test))
naive_rmse <- RMSE(test$rating, predictions)
print(naive_rmse)
get_regression_table
install.packages("ISLR")
library(tidyverse)
library(shiny)
install.packages("readxl")
library(tidyverse)
library(shiny)
ui <- fluidPage(
titlePanel("Hello Shiny!"),
sidebarPanel(
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
mainPanel(
plotOutput(outputId = "distPlot")
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
shinyApp(ui, server)
#adsl <- read_sas("C:/Users/astos/Desktop/RWorkshop/adsl.sas7bdat")
adsl1 <- select(adsl, SUBJID, AGE, SEX, SMWDBL, WHOFCBL, HEIGHTBL, WEIGHTBL, TRTSDT, TRTEDT)
adsl4 <- mutate(adsl1, DaysBet = TRTEDT - TRTSDT, BMIBL = WEIGHTBL / (HEIGHTBL * HEIGHTBL * 10e-5))
adsl_ggplot <- adsl4 %>%
filter(!is.na(SMWDBL) & !is.na(BMIBL) & !is.na(SEX) & WHOFCBL != "")
knitr::opts_chunk$set(echo = TRUE)
#\\actelion.com\POOL\GLOBAL\BIOSTATISTICS\Clinical Projects\ACT-064992_Macitentan\ACT-064992_in_PAH_adult\Regulatory Authorities\FDC Maci and Tada\US (FDA)\OPUS_FDC\ADaM_Data
adsl <- read.sas7bdat("\\\\actelion.com\\POOL\\GLOBAL\\BIOSTATISTICS\\Clinical Projects\\ACT-064992_Macitentan\\ACT-064992_in_PAH_adult\\Regulatory Authorities\\FDC Maci and Tada\\US (FDA)\\OPUS_FDC\\ADaM_Data\\adsl.sas7bdat")
#install.packages("sas7bdat")
library(sas7bdat)
#\\actelion.com\POOL\GLOBAL\BIOSTATISTICS\Clinical Projects\ACT-064992_Macitentan\ACT-064992_in_PAH_adult\Regulatory Authorities\FDC Maci and Tada\US (FDA)\OPUS_FDC\ADaM_Data
adsl <- read.sas7bdat("\\\\actelion.com\\POOL\\GLOBAL\\BIOSTATISTICS\\Clinical Projects\\ACT-064992_Macitentan\\ACT-064992_in_PAH_adult\\Regulatory Authorities\\FDC Maci and Tada\\US (FDA)\\OPUS_FDC\\ADaM_Data\\adsl.sas7bdat")
#adsl <- read_sas("C:/Users/astos/Desktop/RWorkshop/adsl.sas7bdat")
adsl1 <- select(adsl, SUBJID, AGE, SEX, SMWDBL, WHOFCBL, HEIGHTBL, WEIGHTBL, TRTSDT, TRTEDT)
adsl4 <- mutate(adsl1, DaysBet = TRTEDT - TRTSDT, BMIBL = WEIGHTBL / (HEIGHTBL * HEIGHTBL * 10e-5))
adsl_ggplot <- adsl4 %>%
filter(!is.na(SMWDBL) & !is.na(BMIBL) & !is.na(SEX) & WHOFCBL != "")
#adsl <- read_sas("C:/Users/astos/Desktop/RWorkshop/adsl.sas7bdat")
adsl1 <- select(adsl, SUBJID, AGE, SEX, SMWDBL, WHOFCBL, HEIGHTBL, WEIGHTBL, TRTSDT, TRTEDT)
adsl4 <- mutate(adsl1, DaysBet = TRTEDT - TRTSDT, BMIBL = WEIGHTBL / (HEIGHTBL * HEIGHTBL * 10e-5))
adsl_ggplot <- adsl4 %>%
filter(!is.na(SMWDBL) & !is.na(BMIBL) & !is.na(SEX) & WHOFCBL != "")
#adsl <- read_sas("C:/Users/astos/Desktop/RWorkshop/adsl.sas7bdat")
adsl1 <- select(adsl, SUBJID, AGE, SEX, SMWDBL, WHOFCBL, HEIGHTBL, WEIGHTBL, TRTSDT, TRTEDT)
adsl4 <- mutate(adsl1, DaysBet = TRTEDT - TRTSDT, BMIBL = WEIGHTBL / (HEIGHTBL * HEIGHTBL * 10e-5))
adsl_ggplot <- adsl4 %>%
filter(!is.na(SMWDBL) & !is.na(BMIBL) & !is.na(SEX) & WHOFCBL != "")
#\\actelion.com\POOL\GLOBAL\BIOSTATISTICS\Clinical Projects\ACT-064992_Macitentan\ACT-064992_in_PAH_adult\Regulatory Authorities\FDC Maci and Tada\US (FDA)\OPUS_FDC\ADaM_Data
#adsl <- read.sas7bdat("\\\\actelion.com\\POOL\\GLOBAL\\BIOSTATISTICS\\Clinical Projects\\ACT-064992_Macitentan\\ACT-064992_in_PAH_adult\\Regulatory Authorities\\FDC Maci and Tada\\US (FDA)\\OPUS_FDC\\ADaM_Data\\adsl.sas7bdat")
adsl <- read.sas7bdat("..\\data\\adsl.sas7bdat")
#\\actelion.com\POOL\GLOBAL\BIOSTATISTICS\Clinical Projects\ACT-064992_Macitentan\ACT-064992_in_PAH_adult\Regulatory Authorities\FDC Maci and Tada\US (FDA)\OPUS_FDC\ADaM_Data
#adsl <- read.sas7bdat("\\\\actelion.com\\POOL\\GLOBAL\\BIOSTATISTICS\\Clinical Projects\\ACT-064992_Macitentan\\ACT-064992_in_PAH_adult\\Regulatory Authorities\\FDC Maci and Tada\\US (FDA)\\OPUS_FDC\\ADaM_Data\\adsl.sas7bdat")
adsl <- read.sas7bdat(".\\data\\adsl.sas7bdat")
library(tidyverse)
library(shiny)
library(haven)
adsl <- read_sas("./data/adsl.sas7bdat")
adsl1 <- select(adsl, SUBJID, AGE, SEX, SMWDBL, WHOFCBL, HEIGHTBL, WEIGHTBL, TRTSDT, TRTEDT)
adsl4 <- mutate(adsl1, DaysBet = TRTEDT - TRTSDT, BMIBL = WEIGHTBL / (HEIGHTBL * HEIGHTBL * 10e-5))
adsl_ggplot <- adsl4 %>%
filter(!is.na(SMWDBL) & !is.na(BMIBL) & !is.na(SEX) & WHOFCBL != "")
